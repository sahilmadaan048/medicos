The "Narrowing" chapter in the TypeScript Handbook explains how TypeScript refines types from broader to more specific ones based on code structure, enhancing type safety and reducing errors. Here's a concise summary with illustrative code examples:([typescriptlang.org][1])

---

### ðŸ”¹ What is Narrowing?

Narrowing is TypeScript's process of refining a variable's type from a broader union type to a more specific type based on runtime checks.

**Example:**

```typescript
function padLeft(padding: number | string, input: string): string {
  if (typeof padding === "number") {
    return " ".repeat(padding) + input;
  }
  return padding + input;
}
```



In this function, TypeScript narrows the type of `padding` within the `if` block to `number`, allowing the use of `repeat`. Outside the `if`, it's treated as `string`.([typescriptlang.org][2])

---

### ðŸ”¹ Type Guards

Type guards are expressions that perform runtime checks to ensure a variable is of a specific type. Common type guards include:

* **`typeof` checks:**

```typescript
  if (typeof value === "string") {
    // value is a string here
  }
```



* **`instanceof` checks:**

```typescript
  if (value instanceof Date) {
    // value is a Date here
  }
```



These checks help TypeScript narrow down the type within specific code blocks.([typescriptlang.org][1])

---

### ðŸ”¹ Control Flow Analysis

TypeScript uses control flow analysis to track variable types across different code paths.([typescriptlang.org][2])

**Example:**

```typescript
function example() {
  let x: string | number | boolean;
  x = Math.random() < 0.5;
  console.log(x); // boolean
  if (Math.random() < 0.5) {
    x = "hello";
    console.log(x); // string
  } else {
    x = 100;
    console.log(x); // number
  }
  return x; // string | number
}
```



Here, TypeScript narrows the type of `x` based on the control flow, providing more precise type information within each block.

---

### ðŸ”¹ User-Defined Type Guards

You can create custom functions to narrow types using type predicates.([typescriptlang.org][2])

**Example:**

```typescript
function isFish(pet: Fish | Bird): pet is Fish {
  return (pet as Fish).swim !== undefined;
}
```



In this function, `isFish` checks if `pet` has a `swim` property, effectively narrowing its type to `Fish` when the condition is true.([typescriptlang.org][2])

---

### ðŸ”¹ The `never` Type

When TypeScript determines that a code path should never be possible, it assigns the `never` type. This is useful for exhaustive checks in discriminated unions.

**Example:**

```typescript
type Shape = Circle | Square;

function getArea(shape: Shape): number {
  switch (shape.kind) {
    case "circle":
      return Math.PI * shape.radius ** 2;
    case "square":
      return shape.size ** 2;
    default:
      const _exhaustiveCheck: never = shape;
      return _exhaustiveCheck;
  }
}
```



If a new shape is added to the `Shape` union and not handled in the switch, TypeScript will error at the `never` assignment, prompting you to handle the new case.

---

Understanding and utilizing narrowing in TypeScript allows for more precise type checking and safer code.

For more detailed information, refer to the full article: [Narrowing - TypeScript Handbook](https://www.typescriptlang.org/docs/handbook/2/narrowing.html).

[1]: https://www.typescriptlang.org/docs/handbook/2/everyday-types.html?utm_source=chatgpt.com "Documentation - Everyday Types - TypeScript"
[2]: https://www.typescriptlang.org/docs/handbook/2/narrowing.html?utm_source=chatgpt.com "Narrowing - TypeScript: Documentation"

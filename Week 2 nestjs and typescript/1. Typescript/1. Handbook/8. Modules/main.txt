The "Modules" chapter in the TypeScript Handbook provides a comprehensive overview of how TypeScript handles modularization, enhancing JavaScript's capabilities with static typing and improved tooling. Here's a concise summary with illustrative code examples:

---

### ðŸ”¹ What Defines a Module in TypeScript

In TypeScript, a file is considered a module if it contains at least one top-level `import` or `export` statement. Without these, the file is treated as a script, where variables and functions are available in the global scope.([typescriptlang.org][1])

```typescript
// hello.ts
export default function greet() {
  console.log("Hello, world!");
}
```



```typescript
// app.ts
import greet from "./hello";
greet();
```



---

### ðŸ”¹ ES Module Syntax

TypeScript fully supports ECMAScript Modules (ESM), allowing for the use of `import` and `export` statements.([typescriptlang.org][2])

* **Default Export**:

```typescript
  // maths.ts
  export default function add(a: number, b: number): number {
    return a + b;
  }
```



```typescript
  // app.ts
  import add from "./maths";
  console.log(add(2, 3));
```



* **Named Exports**:

```typescript
  // maths.ts
  export const pi = 3.14;
  export function multiply(a: number, b: number): number {
    return a * b;
  }
```



```typescript
  // app.ts
  import { pi, multiply } from "./maths";
  console.log(multiply(pi, 2));
```



* **Renaming Imports**:

```typescript
  // app.ts
  import { multiply as mul } from "./maths";
  console.log(mul(2, 3));
```



* **Namespace Imports**:

```typescript
  // app.ts
  import * as math from "./maths";
  console.log(math.pi);
  console.log(math.multiply(2, 3));
```



---

### ðŸ”¹ CommonJS Syntax

TypeScript also supports CommonJS syntax, commonly used in Node.js environments.

* **Exporting**:

```typescript
  // maths.ts
  exports.pi = 3.14;
  exports.multiply = function(a: number, b: number): number {
    return a * b;
  };
```



* **Importing**:

```typescript
  // app.ts
  const maths = require("./maths");
  console.log(maths.pi);
  console.log(maths.multiply(2, 3));
```



---

### ðŸ”¹ Module Resolution

TypeScript resolves modules based on the `moduleResolution` setting in the `tsconfig.json` file. The two primary strategies are:([typescriptlang.org][3])

* **Node**: Follows Node.js module resolution logic.
* **Classic**: The default resolution strategy, primarily for legacy projects.([typescriptlang.org][4])

```json
{
  "compilerOptions": {
    "moduleResolution": "node"
  }
}
```



---

### ðŸ”¹ Module Output Targets

When compiling TypeScript, the `module` option in `tsconfig.json` determines the module system for the emitted JavaScript. Common options include:([typescriptlang.org][5])

* **CommonJS**: For Node.js environments.
* **ESNext**: For modern browsers and bundlers.
* **UMD**: For universal modules.([typescriptlang.org][3], [typescriptlang.org][1], [typescriptlang.org][6])

```json
{
  "compilerOptions": {
    "module": "ESNext"
  }
}
```



---

### ðŸ”¹ Type-Only Imports and Exports

To import or export types without including them in the emitted JavaScript, TypeScript provides `import type` and `export type`.([typescriptlang.org][4])

* **Importing Types**:

```typescript
  import type { SomeType } from "./types";
```



* **Exporting Types**:

```typescript
  export type { SomeType };
```



This ensures that type information is preserved during development but not included in the runtime code.

---

For more detailed information, refer to the full article: [Modules - TypeScript Handbook](https://www.typescriptlang.org/docs/handbook/2/modules.html).

[1]: https://www.typescriptlang.org/docs/handbook/2/modules.html?utm_source=chatgpt.com "Documentation - Modules - TypeScript"
[2]: https://www.typescriptlang.org/docs/handbook/modules/theory.html?utm_source=chatgpt.com "Documentation - Modules - Theory - TypeScript"
[3]: https://www.typescriptlang.org/docs/handbook/modules/guides/choosing-compiler-options.html?utm_source=chatgpt.com "Documentation - Modules - Choosing Compiler Options - TypeScript"
[4]: https://www.typescriptlang.org/docs/handbook/modules/reference.html?utm_source=chatgpt.com "Documentation - Modules - Reference - TypeScript"
[5]: https://www.typescriptlang.org/tsconfig/module?utm_source=chatgpt.com "TSConfig Option: module - TypeScript"
[6]: https://www.typescriptlang.org/docs/handbook/namespaces-and-modules.html?utm_source=chatgpt.com "Documentation - Namespaces and Modules - TypeScript"

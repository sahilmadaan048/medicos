Sure! Let's explore **Type Inference** and **Type Aliases** in **TypeScript** with **clear explanations and examples**.

---

## ✅ 1. Type Inference

TypeScript can **automatically determine the type** of a variable or expression **without an explicit type annotation**. This is called **type inference**.

### 🔹 Example 1: Variable Inference

```typescript
let name = "Alice";  // inferred as string
// name = 42; // ❌ Error: Type 'number' is not assignable to type 'string'
```

TypeScript infers the type of `name` as `string` because it’s initialized with a string value.

---

### 🔹 Example 2: Function Return Inference

```typescript
function add(a: number, b: number) {
  return a + b;
}
// The return type is inferred as number
```

Even though we didn’t specify the return type, TypeScript inferred it as `number`.

---

### 🔹 Example 3: Arrays and Objects

```typescript
let numbers = [1, 2, 3];      // inferred as number[]
let person = { name: "Bob", age: 30 };  // inferred as { name: string, age: number }
```

You don’t always need to write the type unless you want stricter control or clarity.

---

### When to Use Explicit Types?

* For **function parameters and return types**
* When **working with APIs**, libraries, or **complex objects**
* When **you want to document or restrict the type**

---

## ✅ 2. Type Aliases

Type aliases let you **create a custom name** for a type. It's helpful for **code readability**, **reuse**, and **simplifying complex types**.

### 🔹 Syntax:

```typescript
type AliasName = existingType;
```

---

### 🔹 Example 1: Simple Alias

```typescript
type Username = string;

let user1: Username = "Sahil";
let user2: Username = "Aman";
```

---

### 🔹 Example 2: Object Type Alias

```typescript
type User = {
  name: string;
  age: number;
  isActive: boolean;
};

const user: User = {
  name: "Alice",
  age: 25,
  isActive: true
};
```

---

### 🔹 Example 3: Union Type Alias

```typescript
type ID = number | string;

let userId: ID = 101;
userId = "abc123";  // OK
// userId = true;    // ❌ Error
```

---

### 🔹 Example 4: Function Type Alias

```typescript
type GreetFunction = (name: string) => string;

const greet: GreetFunction = (name) => {
  return `Hello, ${name}`;
};
```

---

### ✅ Type Alias vs Interface

* `type` can alias **primitives**, **unions**, **tuples**, **functions**, and **objects**.
* `interface` is mainly for **object structures** and supports **declaration merging**.

---

### ✅ Summary

| Concept            | Description                                      | Example                             |
| ------------------ | ------------------------------------------------ | ----------------------------------- |
| **Type Inference** | TypeScript figures out the type automatically    | `let a = 10; // inferred as number` |
| **Type Alias**     | Give a name to a type (primitive, union, object) | `type ID = string \| number;`       |

---

### Want to practice?

Let me know and I’ll give you short questions or tasks to test your understanding of inference and type aliases.

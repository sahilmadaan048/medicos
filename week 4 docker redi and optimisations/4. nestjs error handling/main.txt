
Here's a **detailed breakdown** of both **Error Handling & Interceptors** in NestJS and a quick intro to **Docker Basics**, with examples and best practices üëá

---

## üõ†Ô∏è 1. Error Handling in NestJS

### ‚úÖ Use `HttpException` to throw consistent errors

```ts
import { HttpException, HttpStatus } from '@nestjs/common';

throw new HttpException('Forbidden', HttpStatus.FORBIDDEN);

// OR with object:
throw new HttpException(
  {
    status: HttpStatus.FORBIDDEN,
    error: 'You are not allowed to do this.',
  },
  HttpStatus.FORBIDDEN,
);
```

---

### üî• Custom Exception Filter

Used to **format** or **log** errors in a consistent way.

---

### üìÅ `http-exception.filter.ts`

```ts
import {
  ExceptionFilter,
  Catch,
  ArgumentsHost,
  HttpException,
  Logger,
} from '@nestjs/common';
import { Request, Response } from 'express';

@Catch(HttpException)
export class HttpExceptionFilter implements ExceptionFilter {
  private logger = new Logger('HttpException');

  catch(exception: HttpException, host: ArgumentsHost) {
    const ctx = host.switchToHttp();
    const res = ctx.getResponse<Response>();
    const req = ctx.getRequest<Request>();

    const status = exception.getStatus();
    const response = exception.getResponse();

    const errorResponse = {
      statusCode: status,
      timestamp: new Date().toISOString(),
      path: req.url,
      method: req.method,
      message: (response as any).message || exception.message,
    };

    this.logger.error(
      `${req.method} ${req.url} ${status} - ${errorResponse.message}`,
    );

    res.status(status).json(errorResponse);
  }
}
```

---

### ‚úÖ Use Globally

In `main.ts`:

```ts
import { HttpExceptionFilter } from './common/filters/http-exception.filter';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  app.useGlobalFilters(new HttpExceptionFilter());
  await app.listen(3000);
}
```

---

## üö¶ 2. Interceptors in NestJS

Interceptors are used for **cross-cutting concerns** like logging, response transformation, and measuring performance.

---

### üìÅ Logging Interceptor

```ts
import {
  Injectable,
  NestInterceptor,
  ExecutionContext,
  CallHandler,
  Logger,
} from '@nestjs/common';
import { Observable, tap } from 'rxjs';

@Injectable()
export class LoggingInterceptor implements NestInterceptor {
  private logger = new Logger('HTTP');

  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {
    const req = context.switchToHttp().getRequest();
    const { method, url } = req;
    const now = Date.now();

    return next.handle().pipe(
      tap(() => {
        const delay = Date.now() - now;
        this.logger.log(`${method} ${url} - ${delay}ms`);
      }),
    );
  }
}
```

---

### ‚úÖ Apply Globally

In `main.ts`:

```ts
import { LoggingInterceptor } from './common/interceptors/logging.interceptor';

app.useGlobalInterceptors(new LoggingInterceptor());
```

---

### üîÑ Response Transformation Interceptor

```ts
@Injectable()
export class TransformInterceptor<T> implements NestInterceptor<T, any> {
  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {
    return next.handle().pipe(
      map(data => ({
        success: true,
        data,
      })),
    );
  }
}
```

---

### üïí Measuring Execution Time (same as LoggingInterceptor)

Just log the `Date.now()` difference like above.

---

### ‚úÖ Summary of Error Handling + Interceptors

| Feature                | Use Case                         |
| ---------------------- | -------------------------------- |
| `HttpException`        | Throw API-safe errors            |
| Custom ExceptionFilter | Format/log errors consistently   |
| Global Filters         | Avoid boilerplate try-catch      |
| Interceptors           | Logging, transform, timing, etc. |

---
